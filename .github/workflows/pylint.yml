name: Python Code Quality Check

on: [push]

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        pip install -r requirements.txt  # 安装项目依赖

    - name: Run Pylint with scoring
      run: |
        echo "Pylint analysis started..."
        pylint --output-format=colorized --reports=yes --score=yes $(git ls-files '*.py') > pylint_report.txt || true
        
        # 提取评分并设置输出变量
        SCORE=$(grep "Your code has been rated at" pylint_report.txt | grep -oE "[0-9]+\.[0-9]+/10")
        echo "Pylint Score: $SCORE"
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        
        # 上传完整报告作为artifact
        echo "Pylint Report:"
        cat pylint_report.txt

    - name: Upload Pylint Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pylint-report-${{ matrix.python-version }}
        path: pylint_report.txt

    - name: Check score threshold
      run: |
        SCORE=$(echo "${{ steps.pylint.outputs.score }}" | cut -d'/' -f1)
        MIN_SCORE=6.0  # 设置最低合格分数
        
        if (( $(echo "$SCORE < $MIN_SCORE" | bc -l) )); then
          echo "::error::Pylint score $SCORE is below minimum required $MIN_SCORE"
          exit 1
        else
          echo "Pylint score $SCORE meets requirements"
        fi